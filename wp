[33mcommit 7f95e90fbe351a3449ff9e67fd70321aa2c25552[m
Author: Saqirmdev <1king2@azet.sk>
Date:   Wed Oct 17 15:50:06 2012 +0200

    SQL/CORE - Ticket; Core/Spell - Barskin; SQL - More fixes;

[1mdiff --git a/src/server/game/Handlers/TicketHandler.cpp b/src/server/game/Handlers/TicketHandler.cpp[m
[1mindex d667518..63330a5 100755[m
[1m--- a/src/server/game/Handlers/TicketHandler.cpp[m
[1m+++ b/src/server/game/Handlers/TicketHandler.cpp[m
[36m@@ -15,7 +15,8 @@[m
  * You should have received a copy of the GNU General Public License along[m
  * with this program. If not, see <http://www.gnu.org/licenses/>.[m
  */[m
[31m-[m
[32m+[m[41m [m
[32m+[m[32m#include "zlib.h"[m
 #include "Language.h"[m
 #include "WorldPacket.h"[m
 #include "Common.h"[m
[36m@@ -26,7 +27,7 @@[m
 #include "WorldSession.h"[m
 #include "Util.h"[m
 [m
[31m-void WorldSession::HandleGMTicketCreateOpcode(WorldPacket & recv_data)[m
[32m+[m[32mvoid WorldSession::HandleGMTicketCreateOpcode(WorldPacket& recvData)[m
 {[m
     // Don't accept tickets if the ticket queue is disabled. (Ticket UI is greyed out but not fully dependable)[m
     if (sTicketMgr->GetStatus() == GMTICKET_QUEUE_STATUS_DISABLED)[m
[36m@@ -42,7 +43,43 @@[m [mvoid WorldSession::HandleGMTicketCreateOpcode(WorldPacket & recv_data)[m
     // Player must not have ticket[m
     if (!sTicketMgr->GetTicketByPlayer(GetPlayer()->GetGUID()))[m
     {[m
[31m-        GmTicket* ticket = new GmTicket(GetPlayer(), recv_data);[m
[32m+[m[32m              GmTicket* ticket = new GmTicket(GetPlayer(), recvData);[m
[32m+[m[32m       uint32 count;[m
[32m+[m[32m       std::list<uint32> times;[m
[32m+[m[32m       uint32 decompressedSize;[m
[32m+[m[32m       std::string chatLog;[m
[32m+[m[32m       recvData >> count;[m
[32m+[m[32m       for (uint32 i = 0; i < count; i++)[m
[32m+[m[32m        {[m
[32m+[m[32m            uint32 time;[m
[32m+[m[32m            recvData >> time;[m
[32m+[m[32m            times.push_back(time);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m       recvData >> decompressedSize;[m
[32m+[m
[32m+[m[32m       if (count && decompressedSize && decompressedSize < 0xFFFF)[m
[32m+[m[32m        {[m
[32m+[m[32m            uint32 pos = recvData.rpos();[m
[32m+[m[32m            ByteBuffer dest;[m
[32m+[m[32m            dest.resize(decompressedSize);[m
[32m+[m
[32m+[m[32m           uLongf realSize = decompressedSize;[m
[32m+[m[32m            if (uncompress(const_cast<uint8*>(dest.contents()), &realSize, const_cast<uint8*>(recvData.contents() + pos), recvData.size() - pos) == Z_OK)[m
[32m+[m[32m            {[m
[32m+[m[32m                dest >> chatLog;[m
[32m+[m[32m                ticket->SetChatLog(times, chatLog);[m
[32m+[m[32m           }[m
[32m+[m[32m            else[m
[32m+[m[32m           {[m
[32m+[m[32m               sLog->outError(LOG_FILTER_NETWORKIO, "CMSG_GMTICKET_CREATE possibly corrupt. Uncompression failed.");[m
[32m+[m[32m               recvData.rfinish();[m
[32m+[m[32m              return;[m
[32m+[m[32m           }[m
[32m+[m
[32m+[m[32m           recvData.rfinish(); // Will still have compressed data in buffer.[m
[32m+[m[32m        }[m
[32m+[m
         sTicketMgr->AddTicket(ticket);[m
         sTicketMgr->UpdateLastChange();[m
 [m
[1mdiff --git a/src/server/game/Spells/Spell.cpp b/src/server/game/Spells/Spell.cpp[m
[1mindex 73a7999..7114268 100755[m
[1m--- a/src/server/game/Spells/Spell.cpp[m
[1m+++ b/src/server/game/Spells/Spell.cpp[m
[36m@@ -5803,7 +5803,7 @@[m [mSpellCastResult Spell::CheckCasterAuras() const[m
                     break;[m
                 }[m
             }[m
[31m-            if (foundNotStun)[m
[32m+[m[32m            if (foundNotStun && m_spellInfo->Id != 22812)[m
                 prevented_reason = SPELL_FAILED_STUNNED;[m
         }[m
         else[m
[1mdiff --git a/src/server/game/Tickets/TicketMgr.cpp b/src/server/game/Tickets/TicketMgr.cpp[m
[1mindex 0a4682d..c8cca86 100755[m
[1m--- a/src/server/game/Tickets/TicketMgr.cpp[m
[1m+++ b/src/server/game/Tickets/TicketMgr.cpp[m
[36m@@ -31,45 +31,34 @@[m [minline float GetAge(uint64 t) { return float(time(NULL) - t) / DAY; }[m
 // GM ticket[m
 GmTicket::GmTicket() { }[m
 [m
[31m-GmTicket::GmTicket(Player* player, WorldPacket& recv_data) : _createTime(time(NULL)), _lastModifiedTime(time(NULL)), _closedBy(0), _assignedTo(0), _completed(false), _escalatedStatus(TICKET_UNASSIGNED)[m
[32m+[m[32mGmTicket::GmTicket(Player* player, WorldPacket& recvData) : _createTime(time(NULL)), _lastModifiedTime(time(NULL)), _closedBy(0), _assignedTo(0), _completed(false), _escalatedStatus(TICKET_UNASSIGNED), _haveTicket(false)[m
 {[m
     _id = sTicketMgr->GenerateTicketId();[m
     _playerName = player->GetName();[m
     _playerGuid = player->GetGUID();[m
 [m
     uint32 mapId;[m
[31m-    recv_data >> mapId; // Map is sent as UInt32![m
[32m+[m[32m    recvData >> mapId;                      // Map is sent as UInt32![m
     _mapId = mapId;[m
 [m
[31m-    recv_data >> _posX;[m
[31m-    recv_data >> _posY;[m
[31m-    recv_data >> _posZ;[m
[31m-    recv_data >> _message;[m
[32m+[m[32m    recvData >> _posX;[m
[32m+[m[32m    recvData >> _posY;[m
[32m+[m[32m    recvData >> _posZ;[m
[32m+[m[32m    recvData >> _message;sage;[m
     uint32 needResponse;[m
[31m-    recv_data >> needResponse;[m
[31m-    _needResponse = (needResponse == 17); // Requires GM response. 17 = true, 1 = false (17 is default)[m
[31m-    uint8 unk1;[m
[31m-    recv_data >> unk1; // Requests further GM interaction on a ticket to which a GM has already responded[m
[31m-[m
[31m-    recv_data.rfinish();[m
[31m-    /*[m
[31m-    recv_data >> uint32(count); // text lines[m
[31m-    for (int i = 0; i < count; i++)[m
[31m-        recv_data >> uint32();[m
[31m-[m
[31m-    if (something)[m
[31m-        recv_data >> uint32();[m
[31m-    else[m
[31m-        compressed uint32 + string;[m
[31m-    */[m
[32m+[m[32m    recvData >> needResponse;[m
[32m+[m[41m [m	[32m 50[m[41m	[m
[32m+[m[32m    _needResponse = (needResponse == 17);   // Requires GM response. 17 = true, 1 = false (17 is default)[m
[32m+[m[32m    recvData >> _haveTicket;                // Requests further GM interaction on a ticket to which a GM has already responded. Basically means "has a new ticket"[m
 }[m
 [m
 GmTicket::~GmTicket() { }[m
 [m
 bool GmTicket::LoadFromDB(Field* fields)[m
 {[m
[31m-    //     0       1     2      3          4        5      6     7     8           9            10         11         12        13        14        15[m
[31m-    // ticketId, guid, name, message, createTime, mapId, posX, posY, posZ, lastModifiedTime, closedBy, assignedTo, comment, completed, escalated, viewed[m
[32m+[m[32m    //     0       1     2      3          4        5      6     7     8           9            10         11         12       13        14         15        16        17[m
[32m+[m[32m    // ticketId, guid, name, message, createTime, mapId, posX, posY, posZ, lastModifiedTime, closedBy, assignedTo, comment, response, completed, escalated, viewed, haveTicket[m
[32m+[m
     uint8 index = 0;[m
     _id                 = fields[  index].GetUInt32();[m
     _playerGuid         = MAKE_NEW_GUID(fields[++index].GetUInt32(), 0, HIGHGUID_PLAYER);[m
[36m@@ -84,9 +73,11 @@[m [mbool GmTicket::LoadFromDB(Field* fields)[m
     _closedBy           = fields[++index].GetInt32();[m
     _assignedTo         = MAKE_NEW_GUID(fields[++index].GetUInt32(), 0, HIGHGUID_PLAYER);[m
     _comment            = fields[++index].GetString();[m
[32m+[m	[32m_response           = fields[++index].GetString();[m
     _completed          = fields[++index].GetBool();[m
     _escalatedStatus    = GMTicketEscalationStatus(fields[++index].GetUInt8());[m
     _viewed             = fields[++index].GetBool();[m
[32m+[m	[32m_haveTicket         = fields[++index].GetBool();[m
     return true;[m
 }[m
 [m
[36m@@ -109,9 +100,11 @@[m [mvoid GmTicket::SaveToDB(SQLTransaction& trans) const[m
     stmt->setInt32 (++index, GUID_LOPART(_closedBy));[m
     stmt->setUInt32(++index, GUID_LOPART(_assignedTo));[m
     stmt->setString(++index, _comment);[m
[32m+[m	[32mstmt->setString(++index, _response);[m
     stmt->setBool  (++index, _completed);[m
     stmt->setUInt8 (++index, uint8(_escalatedStatus));[m
     stmt->setBool  (++index, _viewed);[m
[32m+[m	[32mstmt->setBool  (++index, _haveTicket);[m
 [m
     CharacterDatabase.ExecuteOrAppend(trans, stmt);[m
 }[m
[36m@@ -125,6 +118,10 @@[m [mvoid GmTicket::DeleteFromDB()[m
 [m
 void GmTicket::WritePacket(WorldPacket& data) const[m
 {[m
[32m+[m	[32mdata << uint32(GMTICKET_STATUS_HASTEXT);[m
[32m+[m[32m    data << uint32(_id);[m
[32m+[m[32m    data << _message;[m
[32m+[m[32m    data << uint8(_haveTicket);[m
     data << GetAge(_lastModifiedTime);[m
     if (GmTicket* ticket = sTicketMgr->GetOldestOpenTicket())[m
         data << GetAge(ticket->GetLastModifiedTime());[m
[36m@@ -222,6 +219,20 @@[m [mvoid GmTicket::TeleportTo(Player* player) const[m
 {[m
     player->TeleportTo(_mapId, _posX, _posY, _posZ, 0.0f, 0);[m
 }[m
[32m+[m[32mvoid GmTicket::SetChatLog(std::list<uint32> time, std::string const& log)[m
[32m+[m[32m{[m
[32m+[m[32m    std::stringstream ss(log);[m
[32m+[m[32m    std::stringstream newss;[m
[32m+[m[32m    std::string line;[m
[32m+[m[32m    while (std::getline(ss, line))[m
[32m+[m[32m    {[m
[32m+[m[32m        newss << secsToTimeString(time.front()) << ": " << line << "\n";[m
[32m+[m[32m        time.pop_front();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    _chatLog = newss.str();[m
[32m+[m[32m}[m
[32m+[m
 [m
 ///////////////////////////////////////////////////////////////////////////////////////////////////[m
 // Ticket manager[m
[36m@@ -365,26 +376,12 @@[m [mvoid TicketMgr::ShowEscalatedList(ChatHandler& handler) const[m
 [m
 void TicketMgr::SendTicket(WorldSession* session, GmTicket* ticket) const[m
 {[m
[31m-    uint32 status = GMTICKET_STATUS_DEFAULT;[m
[31m-    std::string message;[m
[31m-    if (ticket)[m
[31m-    {[m
[31m-        message = ticket->GetMessage();[m
[31m-        status = GMTICKET_STATUS_HASTEXT;[m
[31m-    }[m
[31m-[m
[31m-    WorldPacket data(SMSG_GMTICKET_GETTICKET, (4 + 4 + (ticket ? message.length() + 1 + 4 + 4 + 4 + 1 + 1 : 0)));[m
[31m-    data << uint32(status);                         // standard 0x0A, 0x06 if text present[m
[31m-    data << uint32(ticket ? ticket->GetId() : 0);   // ticketID[m
[32m+[m[32m    WorldPacket data(SMSG_GMTICKET_GETTICKET, (ticket ? (4 + 4 + 1 + 4 + 4 + 4 + 1 + 1) : 4));[m
 [m
     if (ticket)[m
[31m-    {[m
[31m-        data << message.c_str();                    // ticket text[m
[31m-        data << uint8(0x7);                         // ticket category; why is this hardcoded? does it make a diff re: client?[m
[31m-[m
[31m-        // we've got the easy stuff done by now.[m
[31m-        // Now we need to go through the client logic for displaying various levels of ticket load[m
         ticket->WritePacket(data);[m
[31m-    }[m
[32m+[m[32m     else[m
[32m+[m[32m        data << uint32(GMTICKET_STATUS_DEFAULT);[m
[32m+[m
     session->SendPacket(&data);[m
 }[m
[1mdiff --git a/src/server/game/Tickets/TicketMgr.h b/src/server/game/Tickets/TicketMgr.h[m
[1mindex ecf315c..5ad724c 100755[m
[1m--- a/src/server/game/Tickets/TicketMgr.h[m
[1m+++ b/src/server/game/Tickets/TicketMgr.h[m
[36m@@ -82,7 +82,7 @@[m [mclass GmTicket[m
 {[m
 public:[m
     GmTicket();[m
[31m-    explicit GmTicket(Player* player, WorldPacket& recv_data);[m
[32m+[m[32m    explicit GmTicket(Player* player, WorldPacket& recvData);[m
     ~GmTicket();[m
 [m
     bool IsClosed() const { return _closedBy; }[m
[36m@@ -142,6 +142,9 @@[m [mpublic:[m
     std::string FormatMessageString(ChatHandler& handler, bool detailed = false) const;[m
     std::string FormatMessageString(ChatHandler& handler, const char* szClosedName, const char* szAssignedToName, const char* szUnassignedName, const char* szDeletedName) const;[m
 [m
[32m+[m[32m    void SetChatLog(std::list<uint32> time, std::string const& log);[m
[32m+[m[32m    std::string GetChatLog() const { return _chatLog; }[m
[32m+[m
 private:[m
     uint32 _id;[m
     uint64 _playerGuid;[m
[36m@@ -159,8 +162,10 @@[m [mprivate:[m
     bool _completed;[m
     GMTicketEscalationStatus _escalatedStatus;[m
     bool _viewed;[m
[32m+[m	[32mbool _haveTicket;[m
     bool _needResponse; // TODO: find out the use of this, and then store it in DB[m
     std::string _response;[m
[32m+[m	[32mstd::string _chatLog; // No need to store in db, will be refreshed every session client side[m
 };[m
 typedef std::map<uint32, GmTicket*> GmTicketList;[m
 [m
[1mdiff --git a/src/server/shared/Database/Implementation/CharacterDatabase.cpp b/src/server/shared/Database/Implementation/CharacterDatabase.cpp[m
[1mindex add782c..baf2a12 100644[m
[1m--- a/src/server/shared/Database/Implementation/CharacterDatabase.cpp[m
[1m+++ b/src/server/shared/Database/Implementation/CharacterDatabase.cpp[m
[36m@@ -327,8 +327,8 @@[m [mvoid CharacterDatabaseConnection::DoPrepareStatements()[m
     PREPARE_STATEMENT(CHAR_DEL_GO_RESPAWN_BY_INSTANCE, "DELETE FROM gameobject_respawn WHERE mapId = ? AND instanceId = ?", CONNECTION_ASYNC)[m
 [m
     // GM Tickets[m
[31m-    PREPARE_STATEMENT(CHAR_SEL_GM_TICKETS, "SELECT ticketId, guid, name, message, createTime, mapId, posX, posY, posZ, lastModifiedTime, closedBy, assignedTo, comment, completed, escalated, viewed FROM gm_tickets", CONNECTION_SYNCH)[m
[31m-    PREPARE_STATEMENT(CHAR_REP_GM_TICKET, "REPLACE INTO gm_tickets (ticketId, guid, name, message, createTime, mapId, posX, posY, posZ, lastModifiedTime, closedBy, assignedTo, comment, completed, escalated, viewed) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", CONNECTION_ASYNC)[m
[32m+[m[32m    PREPARE_STATEMENT(CHAR_SEL_GM_TICKETS, "SELECT ticketId, guid, name, message, createTime, mapId, posX, posY, posZ, lastModifiedTime, closedBy, assignedTo, comment, response, completed, escalated, viewed, haveTicket FROM gm_tickets", CONNECTION_SYNCH)[m
[32m+[m[32m    PREPARE_STATEMENT(CHAR_REP_GM_TICKET, "REPLACE INTO gm_tickets (ticketId, guid, name, message, createTime, mapId, posX, posY, posZ, lastModifiedTime, closedBy, assignedTo, comment, response, completed, escalated, viewed, haveTicket) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", CONNECTION_ASYNC)[m
     PREPARE_STATEMENT(CHAR_DEL_GM_TICKET, "DELETE FROM gm_tickets WHERE ticketId = ?", CONNECTION_ASYNC)[m
     PREPARE_STATEMENT(CHAR_DEL_PLAYER_GM_TICKETS, "DELETE FROM gm_tickets WHERE guid = ?", CONNECTION_ASYNC)[m
 [m
